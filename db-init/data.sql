-- MySQL dump 10.13  Distrib 8.0.41, for Win64 (x86_64)
--
-- Host: localhost    Database: upl_learning_platform
-- ------------------------------------------------------
-- Server version	8.0.41

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `course`
--

LOCK TABLES `course` WRITE;
/*!40000 ALTER TABLE `course` DISABLE KEYS */;
INSERT INTO `course` VALUES (31,'Java Basics','Learn the fundamentals of Java:\n- Variables and Data Types\n- Control Structures (if, for, while)\n- Object-Oriented Programming (OOP)\n- Exception Handling\nPerfect for beginners!',106,'Active','2025-05-12 06:35:17'),(32,'Spring Boot','Spring Boot makes it easy to create stand-alone, production-grade Spring applications.\n- Auto Configuration\n- Spring Initializr\n- REST APIs\n- Spring Data JPA\n-Productiom ready features using actuator',105,'Active','2025-05-12 06:35:17'),(33,'Hibernate','Master Hibernate ORM for Java:\n- Entity Mapping\n- One-to-Many, Many-to-Many Relations\n- Lazy vs Eager Fetching\n- JPQL and Criteria API',105,'Active','2025-05-12 06:35:17'),(34,'JSP','JavaServer Pages (JSP) enables dynamic HTML generation:\n- Scriptlets and Expressions\n- JSTL Tags\n- MVC Pattern with JSP\n- Session and Request Handling',105,'Active','2025-05-12 06:35:17'),(35,'Servlet','Learn how Java Servlets work under the hood:\n- Request & Response Lifecycle\n- Web.xml Configuration\n- Session Management\n- Filters and Listeners',105,'Active','2025-05-12 06:35:17'),(36,'MySQL','MySQL is a powerful relational database system:\n- Create, Read, Update, Delete (CRUD)\n- Joins and Subqueries\n- Indexing\n- Transactions and Constraints\nUsed widely in Java backend systems.',106,'Active','2025-05-12 06:35:17'),(37,'Maven','Maven is a Java build and dependency management tool:\n- pom.xml configuration\n- Build lifecycle (clean, compile, package)\n- Dependency scopes\n- Plugins and Repositories',106,'Active','2025-05-12 06:35:17'),(38,'Jenkins','Jenkins is an automation server for CI/CD:\n- Configure build pipelines\n- Git integration\n- Build-Test-Deploy workflows\n- Install plugins and manage jobs',106,'Active','2025-05-12 06:35:17'),(39,'Redis','Redis is a fast, in-memory key-value store:\n- Used for caching and pub/sub\n- Supports strings, lists, sets, hashes\n- Easily integrates with Spring Boot',106,'Active','2025-05-12 06:35:17'),(40,'Apache Kafka','Learn how to build robust, scalable, and real-time applications using Apache Kafka.\\n\nThis course covers:\\n\n- Core concepts of Apache Kafka architecture\\n\n- Setting up Kafka brokers and topics\\n\n- Producing and consuming messages\\n\n- Kafka Streams and real-time data processing\\n\n- Integrating Kafka with Spring Boot microservices\\n\n- Ensuring fault-tolerance and message reliability\\n\n- Hands-on projects with Docker-based Kafka setup\\n',106,'Active','2025-05-13 10:47:27'),(41,'C++','INtroduction and setting up',105,'Pending','2025-05-13 10:52:19'),(42,'dummy','adbHKCSJl\'',105,'Inactive','2025-05-15 04:59:56'),(43,'Testing','Introdution to write test cases and framework\n',122,'Pending','2025-05-23 13:04:41');
/*!40000 ALTER TABLE `course` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `course_edit_history`
--

LOCK TABLES `course_edit_history` WRITE;
/*!40000 ALTER TABLE `course_edit_history` DISABLE KEYS */;
INSERT INTO `course_edit_history` VALUES (29,32,105,'Title: \'Spring Boot\' → \'Spring Boot\', Description: \'Spring Boot makes it easy to create stand-alone, production-grade Spring applications.\n- Auto Configuration\n- Spring Initializr\n- REST APIs\n- Spring Data JPA\' → \'Spring Boot makes it easy to create stand-alone, production-grade Spring applications.\n- Auto Configuration\n- Spring Initializr\n- REST APIs\n- Spring Data JPA\', Status: \'Active\' → \'Active\'','2025-05-12 12:35:22'),(30,41,105,'Course marked as Inactive (soft-deleted)','2025-05-15 03:22:43'),(31,32,105,'Course marked as Inactive (soft-deleted)','2025-05-15 03:28:19'),(32,33,105,'Course marked as Inactive (soft-deleted)','2025-05-15 03:28:24'),(33,42,105,'Course marked as Inactive (soft-deleted)','2025-05-15 05:00:22'),(34,32,105,'Title: \'Spring Boot\' → \'Spring Boot\', Description: \'Spring Boot makes it easy to create stand-alone, production-grade Spring applications.\n- Auto Configuration\n- Spring Initializr\n- REST APIs\n- Spring Data JPA\' → \'Spring Boot makes it easy to create stand-alone, production-grade Spring applications.\n- Auto Configuration\n- Spring Initializr\n- REST APIs\n- Spring Data JPA\n-Productiom ready features using actuator\', Status: \'Active\' → \'Active\'','2025-05-23 05:53:10');
/*!40000 ALTER TABLE `course_edit_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `instructor_approval_log`
--

LOCK TABLES `instructor_approval_log` WRITE;
/*!40000 ALTER TABLE `instructor_approval_log` DISABLE KEYS */;
INSERT INTO `instructor_approval_log` VALUES (19,118,109,'Approved','Instructor approved','2025-05-12 19:34:41.619487'),(20,119,109,'Approved','Instructor approved','2025-05-12 19:34:47.780776'),(21,120,109,'Rejected','Instructor rejected','2025-05-23 19:31:32.238116'),(22,121,109,'Approved','Instructor approved','2025-05-23 20:01:35.787774'),(23,122,109,'Approved','Instructor approved','2025-05-23 20:03:58.633473');
/*!40000 ALTER TABLE `instructor_approval_log` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `tutorial`
--

LOCK TABLES `tutorial` WRITE;
/*!40000 ALTER TABLE `tutorial` DISABLE KEYS */;
INSERT INTO `tutorial` VALUES (20,31,'Java Control Structures','Java Control Structures are the backbone of programming logic. They determine how and in what order instructions are executed in a program.\\n\n\\n\n**1. Conditional Statements**\\n\nConditional statements allow the execution of certain blocks of code based on whether a condition is true or false.\\n\n\\n\n- **if Statement**: Executes a block if the condition is true.\\n\n  Example:\\n\n  if (a > b) {\\n\n      System.out.println(\"A is greater\");\\n\n  }\\n\n\\n\n- **if-else Statement**: Executes one block if the condition is true, another if false.\\n\n  Example:\\n\n  if (a > b) {\\n\n      System.out.println(\"A is greater\");\\n\n  } else {\\n\n      System.out.println(\"B is greater or equal\");\\n\n  }\\n\n\\n\n- **if-else-if Ladder**: Checks multiple conditions sequentially.\\n\n  Example:\\n\n  if (a > b) {\\n\n      // code\\n\n  } else if (a == b) {\\n\n      // code\\n\n  } else {\\n\n      // code\\n\n  }\\n\n\\n\n- **switch Statement**: Selects one block from many based on a value.\\n\n  Example:\\n\n  switch (day) {\\n\n    case 1:\\n\n      System.out.println(\"Monday\");\\n\n      break;\\n\n    case 2:\\n\n      System.out.println(\"Tuesday\");\\n\n      break;\\n\n    default:\\n\n      System.out.println(\"Other day\");\\n\n  }\\n\n\\n\n**2. Looping Statements**\\n\nLoops allow repetitive execution of code until a condition is false.\\n\n\\n\n- **for Loop**: Known number of iterations.\\n\n  Example:\\n\n  for (int i = 0; i < 5; i++) {\\n\n      System.out.println(i);\\n\n  }\\n\n\\n\n- **while Loop**: Unknown number of iterations; condition checked before loop.\\n\n  Example:\\n\n  int i = 0;\\n\n  while (i < 5) {\\n\n      System.out.println(i);\\n\n      i++;\\n\n  }\\n\n\\n\n- **do-while Loop**: Similar to while, but executes at least once.\\n\n  Example:\\n\n  int i = 0;\\n\n  do {\\n\n      System.out.println(i);\\n\n      i++;\\n\n  } while (i < 5);\\n\n\\n\n**3. Jump Statements**\\n\n- **break**: Exit from a loop or switch.\\n\n- **continue**: Skip current iteration and move to the next.\\n\n- **return**: Exit from a method.\\n\n\\n\nThese control structures form the basis of flow control in Java programs. Mastering them helps in writing dynamic, efficient, and logically sound code.\\n\n\\n\nPractice with different real-life scenarios and nested structures is essential to gain proficiency in applying these control statements effectively.\\n\nJava Control Structures are the backbone of programming logic. They determine how and in what order instructions are executed in a program.\\n\n\\n\n**1. Conditional Statements**\\n\nConditional statements allow the execution of certain blocks of code based on whether a condition is true or false.\\n\n\\n\n- **if Statement**: Executes a block if the condition is true.\\n\n  Example:\\n\n  if (a > b) {\\n\n      System.out.println(\"A is greater\");\\n\n  }\\n\n\\n\n- **if-else Statement**: Executes one block if the condition is true, another if false.\\n\n  Example:\\n\n  if (a > b) {\\n\n      System.out.println(\"A is greater\");\\n\n  } else {\\n\n      System.out.println(\"B is greater or equal\");\\n\n  }\\n\n\\n\n- **if-else-if Ladder**: Checks multiple conditions sequentially.\\n\n  Example:\\n\n  if (a > b) {\\n\n      // code\\n\n  } else if (a == b) {\\n\n      // code\\n\n  } else {\\n\n      // code\\n\n  }\\n\n\\n\n- **switch Statement**: Selects one block from many based on a value.\\n\n  Example:\\n\n  switch (day) {\\n\n    case 1:\\n\n      System.out.println(\"Monday\");\\n\n      break;\\n\n    case 2:\\n\n      System.out.println(\"Tuesday\");\\n\n      break;\\n\n    default:\\n\n      System.out.println(\"Other day\");\\n\n  }\\n\n\\n\n**2. Looping Statements**\\n\nLoops allow repetitive execution of code until a condition is false.\\n\n\\n\n- **for Loop**: Known number of iterations.\\n\n  Example:\\n\n  for (int i = 0; i < 5; i++) {\\n\n      System.out.println(i);\\n\n  }\\n\n\\n\n- **while Loop**: Unknown number of iterations; condition checked before loop.\\n\n  Example:\\n\n  int i = 0;\\n\n  while (i < 5) {\\n\n      System.out.println(i);\\n\n      i++;\\n\n  }\\n\n\\n\n- **do-while Loop**: Similar to while, but executes at least once.\\n\n  Example:\\n\n  int i = 0;\\n\n  do {\\n\n      System.out.println(i);\\n\n      i++;\\n\n  } while (i < 5);\\n\n\\n\n**3. Jump Statements**\\n\n- **break**: Exit from a loop or switch.\\n\n- **continue**: Skip current iteration and move to the next.\\n\n- **return**: Exit from a method.\\n\n\\n\nThese control structures form the basis of flow control in Java programs. Mastering them helps in writing dynamic, efficient, and logically sound code.\\n\n\\n\nPractice with different real-life scenarios and nested structures is essential to gain proficiency in applying these control statements effectively.\\n\n','https://www.youtube.com/watch?v=OUZkdKFeuK0&list=PLlhM4lkb2sEgQmNKO43i7v60no4bdc3lI','2025-05-12 06:39:32','Active'),(22,32,'Spring Boot with MySQL and JPA','Integrate Spring Boot with a MySQL database:\n- Spring Data JPA\n- Entity creation\n- Repositories\n- Service layer\n- Application.properties setup','https://www.youtube.com/watch?v=IucFDX3RO9U','2025-05-12 06:39:32','Inactive'),(23,33,'Hibernate Basics and Annotations','Get started with Hibernate ORM:\n- What is ORM?\n- Configuration and dependencies\n- @Entity, @Table, @Id\n- SessionFactory and CRUD operations','https://www.youtube.com/watch?v=Ya7Z2qdUNRI','2025-05-12 06:39:32','Active'),(24,33,'Hibernate Relationships','Learn about mapping relationships:\n- One-to-One\n- One-to-Many\n- Many-to-Many\n- Cascade types and Fetch types','https://www.youtube.com/watch?v=Zxw6doA2TOA','2025-05-12 06:39:32','Active'),(25,34,'Introduction to JSP','Build dynamic web pages using JSP:\n- Scriptlets and Declarations\n- Expression Language (EL)\n- JSP Directives\n- Embedded Java in HTML','https://www.youtube.com/watch?v=6Kbq3PqhVaU','2025-05-12 06:39:32','Active'),(26,34,'JSP with JSTL','Enhance JSP with JSTL:\n- Core tags: if, choose, forEach\n- Formatting and URL tags\n- Custom tag libraries\nClean separation of logic and view.','https://www.youtube.com/watch?v=OuBUUkQfBYM&t=5893s','2025-05-12 06:39:32','Active'),(27,35,'Servlet Lifecycle and Request Handling','Understand the servlet lifecycle:\n- init(), service(), destroy()\n- HttpServletRequest and Response\n- Form data processing\n- Deployment descriptor (web.xml)','https://www.youtube.com/watch?v=7AIjcZMo-V4&t=202s','2025-05-12 06:39:32','Active'),(28,35,'Servlet Sessions and Cookies','Learn about state management:\n- HttpSession\n- Cookies\n- URL Rewriting\n- Session timeout configuration','https://www.youtube.com/watch?v=5tLGwdyPGRY','2025-05-12 06:39:32','Active'),(29,36,'MySQL Basics','Master basic SQL operations:\n- Creating databases and tables\n- CRUD commands\n- Filtering with WHERE and LIKE\n- Sorting and Grouping','https://www.youtube.com/watch?v=7S_tz1z_5bA','2025-05-12 06:39:32','Active'),(30,36,'MySQL Joins and Subqueries','Advanced SQL:\n- INNER JOIN, LEFT JOIN, RIGHT JOIN\n- Subqueries and nested SELECTs\n- Aggregate functions\n- Views and Indexes','https://www.youtube.com/watch?v=9yeOJ0ZMUYw','2025-05-12 06:39:32','Active'),(31,37,'Maven for Java Projects','Introduction to Maven:\n- Installing Maven\n- Understanding pom.xml\n- Adding dependencies\n- Build lifecycle: clean, install, package\nRun a sample project.','https://www.youtube.com/watch?v=bSaBmXFym30','2025-05-12 06:39:32','Active'),(32,37,'Maven Plugins and Profiles','Learn Maven plugins:\n- Compiler plugin\n- Shade plugin (create fat JAR)\n- Creating and activating build profiles\n- Dependency management strategies','https://www.youtube.com/watch?v=594jY1QDDkc','2025-05-12 06:39:32','Pending'),(33,38,'Jenkins Installation and Setup','Install Jenkins on local machine:\n- Setup wizard\n- Install plugins\n- Create your first pipeline\n- GitHub integration basics','https://www.youtube.com/watch?v=MlvNXFdPhB8','2025-05-12 06:39:32','Pending'),(34,38,'Jenkins CI/CD Pipeline','Create automated pipelines:\n- Declarative vs Scripted pipelines\n- Jenkinsfile syntax\n- Build, test, deploy stages\n- Email and Slack notifications','https://www.youtube.com/watch?v=mk2FBuTMwDc','2025-05-12 06:39:32','Active'),(35,39,'Redis Basics and Commands','Redis essentials:\n- Installation and CLI usage\n- Data types: strings, lists, sets, hashes\n- Expiry and TTL\n- Redis persistence (RDB, AOF)','https://www.youtube.com/watch?v=Hbt56gFj998','2025-05-12 06:39:32','Pending'),(36,39,'Spring Boot with Redis Cache','Integrate Redis with Spring Boot:\n- spring-boot-starter-data-redis\n- @Cacheable, @CachePut, @CacheEvict\n- RedisTemplate and configuration','https://www.youtube.com/watch?v=vpe4aDu5ixI','2025-05-12 06:39:32','Pending'),(37,31,'Java Variables and Data Types','Understand Java primitive and non-primitive types:\n- int: Integer numbers (e.g., 10, -5)\n- float, double: Decimal numbers (e.g., 3.14, -2.7)\n- boolean: true or false values\n- char: A single character (e.g., \'A\', \'b\')\n\nLearn about:\n- String: Sequence of characters (e.g., \"Hello World\")\n- Arrays: Group of elements of the same type\n\nAlso covered:\n- Type casting (explicit and implicit)\n- Type inference with \'var\' (Java 10+)\n- Best practices in choosing data types','https://www.youtube.com/watch?v=D3DqJrlckbs','2025-05-12 06:44:43','Active'),(40,32,'Spring Boot REST API with CRUD','Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\nand crud operations on database\n\n...','https://www.youtube.com/watch?v=CRvcm7GKrF0','2025-05-12 07:16:37','Active'),(41,39,'Introduction to Redis','1. Introduction to Redis\\n\nUnderstand what Redis is, its key-value data model, and its use cases as an in-memory database, cache, and message broker.\\n\n\n2. Installing Redis\\n\nStep-by-step guide to installing Redis on Windows, macOS, and Linux using package managers or Docker.\\n\n\n3. Basic Redis Commands\\n\nLearn essential commands like SET, GET, DEL, EXISTS, EXPIRE, and how to interact with Redis using the CLI.\\n\n\n4. Data Structures in Redis\\n\nExplore Redis data types: Strings, Lists, Sets, Sorted Sets, and Hashes with practical examples and use cases.\\n\n\n5. Working with Redis in Java\\n\nIntegrate Redis in Java applications using libraries like Jedis or Lettuce. Covers connection setup and command execution.\\n\n\n6. Redis Pub/Sub Messaging\\n\nImplement real-time messaging using Redis’ Publish/Subscribe capabilities, useful for chat applications and notifications.\\n\n\n7. Redis Persistence Mechanisms\\n\nUnderstand RDB snapshots and AOF (Append Only File), and how to configure persistence for durability.\\n\n\n8. Redis Transactions\\n\nWork with Redis transactions using MULTI, EXEC, DISCARD, and WATCH to ensure atomic operations.\\n\n\n9. Redis with Spring Boot\\n\nUse Spring Data Redis to integrate Redis into Spring Boot applications for caching and real-time features.\\n\n\n10. Redis Caching Strategies\\n\nLearn about caching strategies like cache-aside, write-through, and write-behind patterns with examples.\\n\n\n11. Redis Cluster and Sentinel\\n\nUnderstand how to achieve high availability and horizontal scalability using Redis Cluster and Sentinel.\\n\n\n12. Security and Best Practices\\n\nSecure your Redis instance with authentication, binding, and firewall rules. Learn best practices for performance tuning.\\n\n\n13. Real-time Analytics with Redis\\n\nBuild dashboards and real-time analytics applications using Redis\' fast read/write capabilities and sorted sets.\\n\n\n14. Monitoring and Debugging Redis\\n\nMonitor Redis using tools like Redis CLI, RedisInsight, and Prometheus/Grafana. Debug slow queries and memory usage.\\n\n\n15. Hands-on Project: Real-Time Leaderboard\\n\nDevelop a real-time leaderboard using Redis sorted sets, update ranks in real-time, and display rankings via API.\\n\n','https://www.youtube.com/watch?v=G1rOthIU-uo&t=138s','2025-05-13 10:49:05','Active'),(42,35,'Introduction to servlet','Servlet is a Java class used to extend the capabilities of servers that host applications accessed by means of a request-response model.\\n\nIt is commonly used to create dynamic web pages and APIs in Java web applications.\\n\nServlets run on the server side and respond to client requests, typically via HTTP.\\n\n\nServlets are part of the Java EE (Jakarta EE) specification and are managed by a servlet container (like Apache Tomcat).\\n\nA servlet container is responsible for loading, instantiating, and invoking servlets based on client requests.\\n\n\nKey classes and interfaces in the Servlet API include:\\n\n- `HttpServlet`: The base class for handling HTTP requests.\\n\n- `HttpServletRequest`: Provides request information for HTTP servlets.\\n\n- `HttpServletResponse`: Provides response functionality to send back to the client.\\n\n- `ServletConfig`: Provides servlet configuration information.\\n\n- `ServletContext`: Provides information about the web application environment.\\n\n\nServlet Lifecycle:\\n\n1. **Initialization**: Servlet is instantiated and `init()` method is called.\\n\n2. **Request Handling**: `service()` method is called for each request (delegates to `doGet()`, `doPost()`, etc.).\\n\n3. **Destruction**: `destroy()` method is called before the servlet is removed from service.\\n\n\nServlets can be configured via `web.xml` (deployment descriptor) or using annotations like `@WebServlet`.\\n\n\nServlets support session management, request dispatching, and are often used alongside JSP, JDBC, and frameworks like Spring MVC.\\n\n\nExample `doGet()` method:\\n\n```java\\n\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\\n\n    response.setContentType(\"text/html\");\\n\n    PrintWriter out = response.getWriter();\\n\n    out.println(\"<h1>Hello from Servlet</h1>\");\\n\n}\\n\n```\\n\n\nServlets are efficient, portable, and secure, making them a powerful tool for Java-based web development.\\n\n','https://www.youtube.com/watch?v=CRvcm7GKrF0','2025-05-13 10:53:26','Pending');
/*!40000 ALTER TABLE `tutorial` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `tutorial_edit_history`
--

LOCK TABLES `tutorial_edit_history` WRITE;
/*!40000 ALTER TABLE `tutorial_edit_history` DISABLE KEYS */;
INSERT INTO `tutorial_edit_history` VALUES (10,25,105,'Title: \'Introduction to JSP\' → \'Introduction to JSP\', Content: \'Build dynamic web pages using JSP:\n- Scriptlets and Declarations\n- Expression Language (EL)\n- JSP Directives\n- Embedded Java in HTML\' → \'Build dynamic web pages using JSP:\n- Scriptlets and Declarations\n- Expression Language (EL)\n- JSP Directives\n- Embedded Java in HTML\'','2025-05-13 10:42:54'),(11,27,105,'Title: \'Servlet Lifecycle and Request Handling\' → \'Servlet Lifecycle and Request Handling\', Content: \'Understand the servlet lifecycle:\n- init(), service(), destroy()\n- HttpServletRequest and Response\n- Form data processing\n- Deployment descriptor (web.xml)\' → \'Understand the servlet lifecycle:\n- init(), service(), destroy()\n- HttpServletRequest and Response\n- Form data processing\n- Deployment descriptor (web.xml)\'','2025-05-13 10:53:36'),(12,40,105,'Title: \'Spring Boot REST API with CRUD\' → \'Spring Boot REST API with CRUD\', Content: \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n...\' → \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n...\'','2025-05-15 05:14:19'),(13,40,105,'Title: \'Spring Boot REST API with CRUD\' → \'Spring Boot REST API with CRUD\', Content: \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n...\' → \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n...\'','2025-05-15 05:14:39'),(14,40,105,'Title: \'Spring Boot REST API with CRUD\' → \'Spring Boot REST API with CRUD\', Content: \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n...\' → \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n...\'','2025-05-15 05:15:02'),(15,40,105,'Title: \'Spring Boot REST API with CRUD\' → \'Spring Boot REST API with CRUD\', Content: \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\n...\' → \'Spring Boot is a powerful framework built on top of the Spring Framework to simplify the development of Java applications.\nOne of the most common uses of Spring Boot is to create RESTful APIs that allow Create, Read, Update, and Delete (CRUD) operations.\n\n**1. What is a REST API?**\nA REST (Representational State Transfer) API allows different systems to communicate over HTTP using standard HTTP methods:\n- **GET**: Retrieve data\n- **POST**: Create new data\n- **PUT**: Update existing data\n- **DELETE**: Remove data\n\nand crud operations on database\n\n...\'','2025-05-23 05:54:06');
/*!40000 ALTER TABLE `tutorial_edit_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `user`
--

LOCK TABLES `user` WRITE;
/*!40000 ALTER TABLE `user` DISABLE KEYS */;
INSERT INTO `user` VALUES (105,'hello','hello@gmail.com','$2a$10$R4bVZKyhhrIhahdZIr08kuTNACHVm1MHHYbERC67aRIzUlnpBPC4a','Instructor','Active','2025-05-02 07:46:32'),(106,'priya','priya@gmail.com','$2a$10$Nd4oqeT6QdtrBa/moanhoeVN8Wv/4/h66tI9MOhccnUeUGWSdvl6q','Instructor','Active','2025-05-02 08:10:32'),(109,'admin','admin@gmail.com','$2a$10$ljg3tkCJrM21LPOuKrcbjOpeKS.2yI/a6SAq2729jJWKvQmIpb4ja','Admin','Active','2025-05-02 09:18:00'),(118,'jeron','jeron@email.ocm','$2a$10$7D//iBFyIEVInPo63hvzwuWScbgEC6lIBKqUAYoGWdqLD6tL2Ntu2','Instructor','Active','2025-05-12 12:33:47'),(119,'Thaarana','thaarana@email.com','$2a$10$ZIRD4mMG6VFQsMn.QkJDCO5lkm.9c8IP8/byBYmAQdYbk2n..eHpy','Instructor','Active','2025-05-12 12:34:19'),(120,'dummy1','dummy1@email.com','$2a$10$bQ5DsakFyqJ.BUfC62K0dujI.VPLCI5EAihuCnGGa/4GH4cEveGma','Instructor','Rejected','2025-05-13 10:44:16'),(121,'dummy2','dummy2@email.com','$2a$10$MV3UnLuht0T6gt227nDmMuuA1q89U.zDKharzDDrtDdqaorcF3qe6','Instructor','Active','2025-05-13 10:45:12'),(122,'dummy12','dummy12@email.com','$2a$10$E6.KDRp9R79csGFfouBkEul/m0AKYgOctoQaxG3qtMw2V3tCOQBdC','Instructor','Active','2025-05-23 06:02:06'),(123,'dummy13','dummy13@email.com','$2a$10$EIxv2NL2i9k1a.c5hp6queUbK0DgjM6SPqzDjnXNeyYpYBrQsSdLC','Instructor','Pending','2025-05-23 06:02:35'),(124,'dummy14','dummy14@email.com','$2a$10$rI.55fPn.MSSZEMd.qrty.bENfUQNDZ60ywvE7IzPF8zjiG5zwpEC','Instructor','Pending','2025-05-23 06:03:05'),(125,'dummy15','dummy15@email.com','$2a$10$Y24VfjgN5Oa3V4b24eEQWeu2HY..ru4R33Y4c/Yb/G7WCXHKKw1Di','Instructor','Pending','2025-05-23 06:03:34');
/*!40000 ALTER TABLE `user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-05-29 10:55:42
