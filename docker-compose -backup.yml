version: "3.8"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-container
    restart: always
    environment:
      MYSQL_DATABASE: upl_learning_platform
      MYSQL_ROOT_PASSWORD: 1234
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db-init:/docker-entrypoint-initdb.d
    networks:
      - upl-net

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - upl-net

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - upl-net

  upl-learning-platform:
    build:
      context: ./upl-learning-platform
      dockerfile: Dockerfile
    container_name: springboot-container
    restart: always
    depends_on:
      - mysql
      - redis
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/upl_learning_platform
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 1234
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8081:8081"
    volumes:
      - ~/.m2:/root/.m2
    command: >
      sh -c "
        echo 'Waiting for Redis to be ready...' &&
        until nc -z redis 6379; do
          echo 'Waiting for redis...'; sleep 2;
        done &&
        echo 'Redis is up! Starting Spring Boot app...' &&
        ./mvnw spring-boot:run -Dspring-boot.run.fork=false
      "
    networks:
      - upl-net

  upltutorial:
    build:
      context: ./upltutorial
      dockerfile: Dockerfile
    container_name: angular-container
    restart: always
    ports:
      - "4200:80"
    depends_on:
      - upl-learning-platform
    networks:
      - upl-net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - upl-learning-platform
    networks:
      - upl-net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-container
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - upl-net

volumes:
  mysql_data:
  redis_data:
  grafana_data:


networks:
  upl-net:
    driver: bridge
